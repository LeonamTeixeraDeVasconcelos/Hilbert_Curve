/**
 * @author Leonam Teixeira de Vasconcelos
 */

import model.Curve;
import model.Square;
import model.Point;
import geometry.Hilbert_Calculation;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

@SuppressWarnings("unused")
public class DrawingPanel extends JPanel{
	
	private static final long serialVersionUID = 1L;
	
	//=====================================================================
	//=====================================================================
	// Declaring and defining Variables and arrays
	
	public int level = 0;
	public int level_q = 1;
	public int cont = 0;
	public int color_incrementer = 60;
	
	/**
	 * Variable used in controlling the rendering process:
	 * ....if true:
	 * ........render from level 1 to n;
	 * ....else:
	 * ........render from level n to 1;
	 * 
	 * This variable keeps changing and the rendering process 
	 * keeps happening until the user closes the window.
	 */
	private boolean control = true;
	
	/**
	 * Variable for controling the color pattern of the curves
	 * redered.
	 */
	private boolean control_color_incrementer = true;
	
	/**
	 *  Translation value in y axis
	 */
	private double  translation_y = 10.0;
	
	/**
	 *  Translation value in x axis
	 */
	private double  translation_x = 0.0;
	
	/**
	 *  Array for all curves generated
	 */
   	public List<Curve> curve_list = new ArrayList<>();

	/**
	 *  Array for all points generated
	 */
    	public List<Point> point_list = new ArrayList<>();
    
	/**
	 *  Array for all curves at a given level
	 */
    	public List<Curve> curve_list_level = new ArrayList<>();
    
	//=====================================================================
	//=====================================================================

    
	// ==========================================================================================================
	// ==========================================================================================================
	// ==========================================================================================================
    	/**
     	* This method render all the curves generated by class Hilbert_Calculation's object
     	*/
	@Override
    	protected void paintComponent(Graphics g) { 
		
		// Defining the background color
		this.setBackground(new Color(11,14,46));
		
		// Calling parent paintComponent constructor
		super.paintComponent(g); 
		
		// Definig curve_list array with Hilbert_Calculation curve_list
		this.curve_list = Hilbert_Calculation.curve_list;

		// Definig point_list array with Hilbert_Calculation point_list
		this.point_list = Hilbert_Calculation.point_list;
		
		// Creating a new Graphics2D Object
		Graphics2D graphics_2d = (Graphics2D) g;
		
		// Call method for drawing the reference squares in the screen
		this.drawSquares(g);

		
		// =========================================================================
		// =========================================================================
		// Loop through point_list array and drawing a line between each
		// point and its next
		for (int i = 0; i < (point_list.size() - 1); i++) {
			
			// ===================================================================
			// Getting point at position 'i' on points_list array and its next
			// (Point at 'i + 1')
			Point a = point_list.get(i);
			Point b = point_list.get(i + 1);
			// ===================================================================
			
			
			// ==============================================================================================
			// ==============================================================================================
			// Tests if point a and b has the same level we are drawing:
			// ....if true:
			// ........draw a line between a and b
			// ....else
			// ........loop keeps going
			
			if (a.level == this.level && b.level == this.level) {
				
				// Creates a line between a and b
				Shape line = new Line2D.Double(a.x + translation_x, a.y + translation_y, b.x + translation_x, b.y + translation_y);

				// Setes Graphics2D object color
				graphics_2d.setColor(new Color(color_incrementer, 0, 127));
				
				// Render the line
				graphics_2d.draw(line);
				
				
                		// =====================================================================================
				// Tests the color and by the test sets the control_color_incrementer variable's value
				if(color_incrementer == 255){
					control_color_incrementer = false;
               			}
                		if(color_incrementer == 60){
                			control_color_incrementer = true;
                		}
                		// =====================================================================================
                
                
		                // ==================================================================================
                		// Based on control_color_incrementer variable's value, increments or decrements 
                		// color_incrementer variable's value
                		if(control_color_incrementer){
                			color_incrementer++;
                		}else{
                			color_incrementer--;
                		}
                		// ==================================================================================
			}
			// ==============================================================================================
			// ==============================================================================================
		}
		// ==========================================================================================================
		// ==========================================================================================================
		// ==========================================================================================================
		
		
		// Verify if the method is rendering the last level
		if(this.level == Menu.level){
            		control = false;
        	}		
		
		// Verify if the method is rendering the first level
        	if(this.level == 0){
            		control = true;
        	}
        

        	// ==============================================================================================
        	// ==============================================================================================
        	// If control is true, then increments the level control variables:
        	// This means we are rendering from level 1 to level n
        	// If control is false, then decrements the level control variables:
        	// This means we are rendering from level n to level 1
        	if(control){
        		try {
                
        			// Incrementing level control variables
        			level++;
                		level_q++;
                
                		// Pauses for 2000 ms
                		Thread.sleep(2000);
            
	                	// Emptying the curve_list_level array
	                	this.curve_list_level.clear();
                
                		// Call paint method 
        	        	this.repaint();
            
        		} catch (InterruptedException ex) {
            
            			Logger.getLogger(DrawingPanel.class.getName()).log(Level.SEVERE, null, ex);
            
	            	}
       		}else{
        		try {
                
	        		// Decrementing level control variables
	        		level--;
	        	        level_q--;
                
	                	// Pauses for 2000 ms
	                	Thread.sleep(2000);
            
        	        	// Emptying the curve_list_level array
	                	this.curve_list_level.clear();
                
        	       		// Call paint method 
	                	this.repaint();
            
        		} catch (InterruptedException ex) {
            	
                		Logger.getLogger(DrawingPanel.class.getName()).log(Level.SEVERE, null, ex);
            
            		}
        	}
        	// ==============================================================================================
        	// ==============================================================================================
        
	}
   	//=======================================================================================================
    	//=======================================================================================================

	
    	//=================================================================================================================================================================================================
    	//=================================================================================================================================================================================================
    	//=================================================================================================================================================================================================
	/**
	 * This method draws all the auxiliar squares that were used during the process of building the curves.
	 * @param g: Graphics object
	 */
	private void drawSquares(Graphics g) {
		
		// Looping through curve_list array
		for (Curve curve:curve_list) {
			
			// Checking if curve has the same level as we are rendering in
			if (curve.level == level_q) {
				
				// Creating a new Graphics2D Object
				Graphics2D graphics_2d = (Graphics2D) g;
				
				// Setting Graphics2D Object color
				graphics_2d.setColor(new Color(11, 14, 72));

				
				// ===============================================================================================================================================================================
				// ===============================================================================================================================================================================
				// Creating lines for all four squares that make up the curves from curve_list array and then rendering then
				
				// First square's lines: 
				Shape line_1  = new Line2D.Double(curve.first_square.first_point.x + translation_x,   curve.first_square.first_point.y + translation_y,   curve.first_square.second_point.x + translation_x,  curve.first_square.second_point.y + translation_y);
               			Shape line_2  = new Line2D.Double(curve.first_square.second_point.x + translation_x,  curve.first_square.second_point.y + translation_y,  curve.first_square.third_point.x + translation_x,   curve.first_square.third_point.y + translation_y);
                		Shape line_3  = new Line2D.Double(curve.first_square.third_point.x + translation_x,   curve.first_square.third_point.y + translation_y,   curve.first_square.fourth_point.x + translation_x,  curve.first_square.fourth_point.y + translation_y);
                		Shape line_4  = new Line2D.Double(curve.first_square.fourth_point.x + translation_x,  curve.first_square.fourth_point.y + translation_y,  curve.first_square.first_point.x + translation_x,   curve.first_square.first_point.y + translation_y);
                
                		// Rendering First square's lines
                		graphics_2d.draw(line_1);
                		graphics_2d.draw(line_2);
                		graphics_2d.draw(line_3);
                		graphics_2d.draw(line_4);

                		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                
				// Second square's lines: 
                		Shape line_5  = new Line2D.Double(curve.second_square.first_point.x + translation_x,  curve.second_square.first_point.y + translation_y,  curve.second_square.second_point.x + translation_x, curve.second_square.second_point.y + translation_y);
                		Shape line_6  = new Line2D.Double(curve.second_square.second_point.x + translation_x, curve.second_square.second_point.y + translation_y, curve.second_square.third_point.x + translation_x,  curve.second_square.third_point.y + translation_y);
                		Shape line_7  = new Line2D.Double(curve.second_square.third_point.x + translation_x,  curve.second_square.third_point.y + translation_y,  curve.second_square.fourth_point.x + translation_x, curve.second_square.fourth_point.y + translation_y);
                		Shape line_8  = new Line2D.Double(curve.second_square.fourth_point.x + translation_x, curve.second_square.fourth_point.y + translation_y, curve.second_square.first_point.x + translation_x,  curve.second_square.first_point.y + translation_y);

                		// Rendering Second square's lines
                		graphics_2d.draw(line_5);
                		graphics_2d.draw(line_6);
                		graphics_2d.draw(line_7);
                		graphics_2d.draw(line_8);

                		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                
				// Third square's lines:
                		Shape line_9  = new Line2D.Double(curve.third_square.first_point.x + translation_x,   curve.third_square.first_point.y + translation_y,   curve.third_square.second_point.x + translation_x,  curve.third_square.second_point.y + translation_y);
                		Shape line_10 = new Line2D.Double(curve.third_square.second_point.x + translation_x,  curve.third_square.second_point.y + translation_y,  curve.third_square.third_point.x + translation_x,   curve.third_square.third_point.y + translation_y);
                		Shape line_11 = new Line2D.Double(curve.third_square.third_point.x + translation_x,   curve.third_square.third_point.y + translation_y,   curve.third_square.fourth_point.x + translation_x,  curve.third_square.fourth_point.y + translation_y);
		                Shape line_12 = new Line2D.Double(curve.third_square.fourth_point.x + translation_x,  curve.third_square.fourth_point.y + translation_y,  curve.third_square.first_point.x + translation_x,   curve.third_square.first_point.y + translation_y);
                
		                // Rendering Third square's lines
		                graphics_2d.draw(line_9);
		                graphics_2d.draw(line_10);
		                graphics_2d.draw(line_11);
		                graphics_2d.draw(line_12);
                
                		// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                
				// Fourth square's lines:
                		Shape line_13 = new Line2D.Double(curve.fourth_square.first_point.x + translation_x,  curve.fourth_square.first_point.y + translation_y,  curve.fourth_square.second_point.x + translation_x, curve.fourth_square.second_point.y + translation_y);
                		Shape line_14 = new Line2D.Double(curve.fourth_square.second_point.x + translation_x, curve.fourth_square.second_point.y + translation_y, curve.fourth_square.third_point.x + translation_x,  curve.fourth_square.third_point.y + translation_y);
                		Shape line_15 = new Line2D.Double(curve.fourth_square.third_point.x + translation_x,  curve.fourth_square.third_point.y + translation_y,  curve.fourth_square.fourth_point.x + translation_x, curve.fourth_square.fourth_point.y + translation_y);
                		Shape line_16 = new Line2D.Double(curve.fourth_square.fourth_point.x + translation_x, curve.fourth_square.fourth_point.y + translation_y, curve.fourth_square.first_point.x + translation_x,  curve.fourth_square.first_point.y + translation_y);
				
                		// Rendering Fourth square's lines
                		graphics_2d.draw(line_13);
                		graphics_2d.draw(line_14);
                		graphics_2d.draw(line_15);
                		graphics_2d.draw(line_16);
				// ===============================================================================================================================================================================
				// ===============================================================================================================================================================================
                
			}
			
		}
	
	}
   	//=================================================================================================================================================================================================
    	//=================================================================================================================================================================================================
    	//=================================================================================================================================================================================================
	
}
